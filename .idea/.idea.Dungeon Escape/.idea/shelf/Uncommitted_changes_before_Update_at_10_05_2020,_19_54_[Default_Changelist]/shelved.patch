Index: Library/PackageCache/com.unity.ide.rider@1.2.1/Rider/Editor/UnitTesting/TestEvent.cs
===================================================================
--- Library/PackageCache/com.unity.ide.rider@1.2.1/Rider/Editor/UnitTesting/TestEvent.cs	(date 1576778581000)
+++ Library/PackageCache/com.unity.ide.rider@1.2.1/Rider/Editor/UnitTesting/TestEvent.cs	(date 1576778581000)
@@ -0,0 +1,31 @@
+using System;
+using NUnit.Framework.Interfaces;
+
+namespace Packages.Rider.Editor.UnitTesting
+{
+  [Serializable]
+  public enum EventType { TestStarted, TestFinished, RunFinished, RunStarted } // do not reorder
+
+  [Serializable]
+  public class TestEvent
+  {
+    public EventType type;
+    public string id;
+    public string assemblyName;
+    public string output;
+    public TestStatus testStatus;
+    public double duration;
+    public string parentId;
+    
+    public TestEvent(EventType type, string id, string assemblyName, string output, double duration, TestStatus testStatus, string parentID)
+    {
+      this.type = type;
+      this.id = id;
+      this.assemblyName = assemblyName;
+      this.output = output;
+      this.testStatus = testStatus;
+      this.duration = duration;
+      parentId = parentID;
+    }
+  }
+}
\ No newline at end of file
Index: Library/PackageCache/com.unity.ide.rider@1.2.1/Rider/Editor/PostProcessors/RiderAssetPostprocessor.cs.meta
===================================================================
--- Library/PackageCache/com.unity.ide.rider@1.2.1/Rider/Editor/PostProcessors/RiderAssetPostprocessor.cs.meta	(date 1576778581000)
+++ Library/PackageCache/com.unity.ide.rider@1.2.1/Rider/Editor/PostProcessors/RiderAssetPostprocessor.cs.meta	(date 1576778581000)
@@ -0,0 +1,11 @@
+fileFormatVersion: 2
+guid: 45471ad7b8c1f964da5e3c07d57fbf4f
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
Index: Library/PackageCache/com.unity.ide.rider@1.2.1/CHANGELOG.md.meta
===================================================================
--- Library/PackageCache/com.unity.ide.rider@1.2.1/CHANGELOG.md.meta	(date 1576778581000)
+++ Library/PackageCache/com.unity.ide.rider@1.2.1/CHANGELOG.md.meta	(date 1576778581000)
@@ -0,0 +1,7 @@
+fileFormatVersion: 2
+guid: 8645aa9c3c74fb34ba9499e14fb332b5
+TextScriptImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
Index: Library/PackageCache/com.unity.ide.rider@1.2.1/package.json
===================================================================
--- Library/PackageCache/com.unity.ide.rider@1.2.1/package.json	(date 1576778581000)
+++ Library/PackageCache/com.unity.ide.rider@1.2.1/package.json	(date 1576778581000)
@@ -0,0 +1,19 @@
+{
+  "name": "com.unity.ide.rider",
+  "displayName": "JetBrains Rider Editor",
+  "description": "Code editor integration for supporting JetBrains Rider as code editor for unity. Adds support for generating csproj files for code completion, auto discovery of installations, etc.",
+  "version": "1.2.1",
+  "unity": "2019.2",
+  "unityRelease": "0a12",
+  "dependencies": {
+    "com.unity.test-framework": "1.1.1"
+  },
+  "relatedPackages": {
+    "com.unity.ide.rider.tests": "1.2.1"
+  },
+  "repository": {
+    "type": "git",
+    "url": "git@github.cds.internal.unity3d.com:unity/com.unity.ide.rider.git",
+    "revision": "009bcadf1eb16d9bbf3d00bcf6ccdde2162ce0cb"
+  }
+}
Index: Library/PackageCache/com.unity.ide.rider@1.2.1/Rider/Editor.meta
===================================================================
--- Library/PackageCache/com.unity.ide.rider@1.2.1/Rider/Editor.meta	(date 1576778581000)
+++ Library/PackageCache/com.unity.ide.rider@1.2.1/Rider/Editor.meta	(date 1576778581000)
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: 1b393f6b29a9ee84c803af1ab4944b71
+folderAsset: yes
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
Index: Library/PackageCache/com.unity.ide.rider@1.2.1/Rider/Editor/PluginSettings.cs
===================================================================
--- Library/PackageCache/com.unity.ide.rider@1.2.1/Rider/Editor/PluginSettings.cs	(date 1576778581000)
+++ Library/PackageCache/com.unity.ide.rider@1.2.1/Rider/Editor/PluginSettings.cs	(date 1576778581000)
@@ -0,0 +1,125 @@
+using Unity.CodeEditor;
+using UnityEditor;
+using UnityEngine;
+
+namespace Packages.Rider.Editor
+{
+  public class PluginSettings
+  {
+    public static LoggingLevel SelectedLoggingLevel
+    {
+      get => (LoggingLevel) EditorPrefs.GetInt("Rider_SelectedLoggingLevel", 0);
+      set
+      {
+        EditorPrefs.SetInt("Rider_SelectedLoggingLevel", (int) value);
+      }
+    }
+
+    public static bool LogEventsCollectorEnabled
+    {
+      get { return EditorPrefs.GetBool("Rider_LogEventsCollectorEnabled", true); }
+      private set { EditorPrefs.SetBool("Rider_LogEventsCollectorEnabled", value); }
+    }
+
+
+    private static GUIStyle ourVersionInfoStyle = new GUIStyle()
+    {
+      normal = new GUIStyleState()
+      {
+        textColor = new Color(0, 0, 0, .6f),
+      }, 
+      margin = new RectOffset(4, 4, 4, 4),
+    };
+
+    /// <summary>
+    /// Preferences menu layout
+    /// </summary>
+    /// <remarks>
+    /// Contains all 3 toggles: Enable/Disable; Debug On/Off; Writing Launch File On/Off
+    /// </remarks>
+    [SettingsProvider]
+    private static SettingsProvider RiderPreferencesItem()
+    {
+      if (!RiderScriptEditor.IsRiderInstallation(RiderScriptEditor.CurrentEditor))
+        return null;
+      if (!RiderScriptEditorData.instance.shouldLoadEditorPlugin)
+        return null;
+      var provider = new SettingsProvider("Preferences/Rider", SettingsScope.User)
+      {
+        label = "Rider",
+        keywords = new[] { "Rider" },
+        guiHandler = (searchContext) =>
+        {
+          EditorGUIUtility.labelWidth = 200f;
+          EditorGUILayout.BeginVertical();
+
+          GUILayout.BeginVertical();
+          LogEventsCollectorEnabled =
+            EditorGUILayout.Toggle(new GUIContent("Pass Console to Rider:"), LogEventsCollectorEnabled);
+
+          GUILayout.EndVertical();
+          GUILayout.Label("");
+
+          if (!string.IsNullOrEmpty(EditorPluginInterop.LogPath))
+          {
+            EditorGUILayout.BeginHorizontal();
+            EditorGUILayout.PrefixLabel("Log file:");
+            var previous = GUI.enabled;
+            GUI.enabled = previous && SelectedLoggingLevel != LoggingLevel.OFF;
+            var button = GUILayout.Button(new GUIContent("Open log"));
+            if (button)
+            {
+              //UnityEditorInternal.InternalEditorUtility.OpenFileAtLineExternal(PluginEntryPoint.LogPath, 0);
+              // works much faster than the commented code, when Rider is already started
+              CodeEditor.CurrentEditor.OpenProject(EditorPluginInterop.LogPath, 0, 0);
+            }
+
+            GUI.enabled = previous;
+            GUILayout.EndHorizontal();
+          }
+
+          var loggingMsg =
+            @"Sets the amount of Rider Debug output. If you are about to report an issue, please select Verbose logging level and attach Unity console output to the issue.";
+          SelectedLoggingLevel =
+            (LoggingLevel) EditorGUILayout.EnumPopup(new GUIContent("Logging Level:", loggingMsg),
+              SelectedLoggingLevel);
+
+
+          EditorGUILayout.HelpBox(loggingMsg, MessageType.None);
+
+          LinkButton("https://github.com/JetBrains/resharper-unity");
+
+          GUILayout.FlexibleSpace();
+          GUILayout.BeginHorizontal();
+
+          GUILayout.FlexibleSpace();
+          var assembly = EditorPluginInterop.EditorPluginAssembly;
+          if (assembly != null)
+          {
+            var version = assembly.GetName().Version;
+            GUILayout.Label("Plugin version: " + version, ourVersionInfoStyle);
+          }
+
+          GUILayout.EndHorizontal();
+
+          EditorGUILayout.EndVertical();
+        }
+      };
+      return provider;
+    }
+
+    private static void LinkButton(string url)
+    {
+      var style = EditorStyles.linkLabel;
+
+      var bClicked = GUILayout.Button(url, style);
+
+      var rect = GUILayoutUtility.GetLastRect();
+      rect.width = style.CalcSize(new GUIContent(url)).x;
+      EditorGUIUtility.AddCursorRect(rect, MouseCursor.Link);
+
+      if (bClicked)
+        Application.OpenURL(url);
+    }
+  }
+}
\ No newline at end of file
Index: Library/PackageCache/com.unity.ide.rider@1.2.1/Rider/Editor/RiderScriptEditorData.cs
===================================================================
--- Library/PackageCache/com.unity.ide.rider@1.2.1/Rider/Editor/RiderScriptEditorData.cs	(date 1576778581000)
+++ Library/PackageCache/com.unity.ide.rider@1.2.1/Rider/Editor/RiderScriptEditorData.cs	(date 1576778581000)
@@ -0,0 +1,33 @@
+using System;
+using UnityEditor;
+using UnityEngine;
+
+namespace Packages.Rider.Editor
+{
+  public class RiderScriptEditorData : ScriptableSingleton<RiderScriptEditorData>
+  {
+    [SerializeField] internal bool hasChanges = true; // sln/csproj files were changed 
+    [SerializeField] internal bool shouldLoadEditorPlugin;
+    [SerializeField] internal bool initializedOnce;
+    [SerializeField] internal Version editorBuildNumber;
+    [SerializeField] internal RiderPathLocator.ProductInfo productInfo;
+
+    public void Init()
+    {
+      if (editorBuildNumber == null)
+      {
+        Invalidate(RiderScriptEditor.CurrentEditor);
+      }
+    }
+
+    public void Invalidate(string editorInstallationPath)
+    {
+      editorBuildNumber = RiderPathLocator.GetBuildNumber(editorInstallationPath);
+      productInfo = RiderPathLocator.GetBuildVersion(editorInstallationPath);
+      if (editorBuildNumber == null)
+        shouldLoadEditorPlugin = false;
+
+      shouldLoadEditorPlugin = editorBuildNumber >= new Version("191.7141.156");
+    }
+  }
+}
\ No newline at end of file
Index: Library/PackageCache/com.unity.ide.rider@1.2.1/Rider/Editor/RiderScriptEditor.cs.meta
===================================================================
--- Library/PackageCache/com.unity.ide.rider@1.2.1/Rider/Editor/RiderScriptEditor.cs.meta	(date 1576778581000)
+++ Library/PackageCache/com.unity.ide.rider@1.2.1/Rider/Editor/RiderScriptEditor.cs.meta	(date 1576778581000)
@@ -0,0 +1,11 @@
+fileFormatVersion: 2
+guid: c4095d72f77fbb64ea39b8b3ca246622
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
Index: Library/PackageCache/com.unity.ide.rider@1.2.1/Rider/Editor/Util.meta
===================================================================
--- Library/PackageCache/com.unity.ide.rider@1.2.1/Rider/Editor/Util.meta	(date 1576778581000)
+++ Library/PackageCache/com.unity.ide.rider@1.2.1/Rider/Editor/Util.meta	(date 1576778581000)
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: 5e726086cd652f82087d59d67d2c24cd
+folderAsset: yes
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
Index: Library/PackageCache/com.unity.ide.rider@1.2.1/Rider/Editor/UnitTesting/RiderTestRunner.cs
===================================================================
--- Library/PackageCache/com.unity.ide.rider@1.2.1/Rider/Editor/UnitTesting/RiderTestRunner.cs	(date 1576778581000)
+++ Library/PackageCache/com.unity.ide.rider@1.2.1/Rider/Editor/UnitTesting/RiderTestRunner.cs	(date 1576778581000)
@@ -0,0 +1,65 @@
+using JetBrains.Annotations;
+using UnityEngine;
+#if TEST_FRAMEWORK
+using UnityEditor;
+using UnityEditor.TestTools.TestRunner.Api;
+#else
+using System;
+#endif
+
+namespace Packages.Rider.Editor.UnitTesting
+{
+  public static class RiderTestRunner
+  {
+#if TEST_FRAMEWORK
+    private static readonly TestsCallback Callback = ScriptableObject.CreateInstance<TestsCallback>();
+#endif
+    
+    [UsedImplicitly]
+    public static void RunTestsWithSyncCallbacks(string sessionId, int testMode, string[] assemblyNames, 
+      string[] testNames, string[] categoryNames, string[] groupNames, int? buildTarget,  
+      string callbacksHandlerCodeBase, string callbacksHandlerTypeName, string[] callbacksHandlerDependencies)
+    {
+#if !TEST_FRAMEWORK
+      Debug.LogError("Update Test Framework package to v.1.1.1+ to run tests from Rider.");
+      throw new NotSupportedException("Incompatible `Test Framework` package in Unity. Update to v.1.1.1+");
+#else
+      SyncTestRunEventsHandler.instance.InitRun(sessionId, callbacksHandlerCodeBase, callbacksHandlerTypeName, callbacksHandlerDependencies);
+      RunTests(testMode, assemblyNames, testNames, categoryNames, groupNames, buildTarget);
+#endif      
+    }
+    
+    [UsedImplicitly]
+    public static void RunTests(int testMode, string[] assemblyNames, string[] testNames, string[] categoryNames, string[] groupNames, int? buildTarget)
+    {
+#if !TEST_FRAMEWORK
+      Debug.LogError("Update Test Framework package to v.1.1.1+ to run tests from Rider.");
+      throw new NotSupportedException("Incompatible `Test Framework` package in Unity. Update to v.1.1.1+");
+#else
+      CallbackData.instance.isRider = true;
+            
+      var api = ScriptableObject.CreateInstance<TestRunnerApi>();
+      var settings = new ExecutionSettings();
+      var filter = new Filter
+      {
+        assemblyNames = assemblyNames,
+        testNames = testNames,
+        categoryNames = categoryNames,
+        groupNames = groupNames,
+        targetPlatform = (BuildTarget?) buildTarget
+      };
+      
+      if (testMode > 0) // for future use - test-framework would allow running both Edit and Play test at once
+        filter.testMode = (TestMode) testMode;
+      
+      settings.filters = new []{
+        filter
+      };
+      api.Execute(settings);
+      
+      api.UnregisterCallbacks(Callback); // avoid multiple registrations
+      api.RegisterCallbacks(Callback); // This can be used to receive information about when the test suite and individual tests starts and stops. Provide this with a scriptable object implementing ICallbacks
+#endif
+    }
+  }
+}
\ No newline at end of file
